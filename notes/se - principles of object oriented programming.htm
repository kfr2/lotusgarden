<html><head><title>se - principles of object oriented programming</title></head><body><a href='index.htm'>Notes Home</a><hr><h1>Guiding Principles of Object Oriented Programming &amp; Design</h1>

<ul>
<li>Kevin Richardson</li>
</ul>


<hr />

<h2>Overview</h2>

<ul>
<li><strong>the foundation</strong>

<ul>
<li> Code should be clear, maintainable, and testable.</li>
</ul>
</li>
<li>DRY

<ul>
<li> Don't Repeat Yourself</li>
<li> Refactor code if necessary to move repeated code to another class or method.</li>
<li> Increases code maintainability.</li>
</ul>
</li>
<li>KISS

<ul>
<li> Keep code simple and maintainable.</li>
<li> Reduce complexity of code to make it robust and <em>flexible</em>.</li>
</ul>
</li>
<li>SPM

<ul>
<li> Singular Purpose Modules</li>
<li> Each code class has a singular, well-defined purpose.</li>
<li> Classes can be more easily reused for different projects or different display styles (ex:  console-based, GUI, a web API).</li>
</ul>
</li>
</ul>


<h2>Important Components &amp; Concepts</h2>

<h3>Abstraction</h3>

<ul>
<li>Abstraction is "used to hide certain details and only show the essential features of an object" (<a href="http://www.roseindia.net/java/beginners/oop-in-java.shtml" title="OOP and Its Concepts in Java">Rose India</a>).</li>
<li>Hide details in lower levels so developers can focus on higher level design.</li>
<li>Programming in layers: create self contained classes that only have the attributes and methods each need to function.</li>
<li>Objects in one layer don't know about the layer above them

<ul>
<li>ex:  a PlayingCard doesn't know or care about a DeckOfCards</li>
</ul>
</li>
</ul>


<h3>Encapsulation</h3>

<ul>
<li>"Hid[ing] the complexity of the internal workings of [an] object" (<a href="http://www.adobe.com/devnet/actionscript/learning/oop-concepts/encapsulation.html" title="OOP Concepts:  Encapsulation">Adobe</a>).</li>
<li>"Provide[s] a simplified and understandable way to use [an] object without the need to understand the complexity inside" (<a href="http://www.adobe.com/devnet/actionscript/learning/oop-concepts/encapsulation.html" title="OOP Concepts:  Encapsulation">Adobe</a>).</li>
<li>Providing access to otherwise protected object data via specific accessor and mutator methods.</li>
</ul>


<h3>Class</h3>

<ul>
<li>"Acts as a blueprint or prototype from which objects are created" (<a href="http://docs.oracle.com/javase/tutorial/java/concepts/" title="Lesson: Object-Oriented Programming Concepts">Oracle</a>).</li>
<li>Defines the states (attributes) and behaviors (methods) of an object.</li>
</ul>


<h3>Objects</h3>

<ul>
<li>Instances of a class.

<ul>
<li>ex:  Fido is an instance of a Dog</li>
</ul>
</li>
<li>"A software bundle of related state and behavior" (<a href="http://docs.oracle.com/javase/tutorial/java/concepts/" title="Lesson: Object-Oriented Programming Concepts">Oracle</a>)</li>
</ul>


<h3>Inheritance</h3>

<ul>
<li>"Provides a powerful and natural mechanism for organizing and structuring your software" by letting child classes inherit states and behaviors from their parent classes (<a href="http://docs.oracle.com/javase/tutorial/java/concepts/" title="Lesson: Object-Oriented Programming Concepts">Oracle</a>).</li>
<li>Therefore, Inheritance establishes a hierarchy of class relationships.</li>
<li>Forms an "is-a" relationship</li>
<li>ex:  a SaintBernard inherits many of its characteristics from its parent class, Dog</li>
</ul>


<h3>Interface</h3>

<ul>
<li>Contains abstract methods.</li>
<li>Forces implementing classes to have the abstract methods.</li>
<li>Forms an "acts-as" relationship.</li>
<li>Allows for all implementing classes to be grouped together.

<ul>
<li> ex:  Allows RoboticBee and OrganicBee to be grouped together into a List because they both implement the Bee interface.</li>
</ul>
</li>
</ul>


<h3>Polymorphism</h3>

<ul>
<li>Treating a group of objects as one object by behavior (interfaces) or type (inheritance).</li>
<li>Allows many objects to respond appropriately to a common message</li>
</ul>


<h3>Enumeration</h3>

<ul>
<li>Greatly improves readability for programmers.</li>
<li>Provides for type checking by limiting possible inputs.</li>
<li>ex: <em>suit { SPADE, DIAMOND, CLUB, HEART }</em></li>
</ul>


<h3>Delegation</h3>

<ul>
<li>One object relying upon another to provide a specific set of functionalities.</li>
</ul>


<hr />

<h2>References</h2>

<ul>
<li>Adobe: http://www.adobe.com/devnet/actionscript/learning/oop-concepts/encapsulation.html</li>
<li>Oracle:  http://docs.oracle.com/javase/tutorial/java/concepts/</li>
<li>Rose India: http://www.roseindia.net/java/beginners/oop-in-java.shtml</li>
</ul>

<footer><hr><em>Last modified: 2012-02-03 10:00:27 -0500</em></footer></body></html>
