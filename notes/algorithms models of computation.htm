<html><head><title>algorithms models of computation</title></head><body><a href='index.htm'>Notes Home</a><hr><h1>defining a language</h1>

<p>regular expression (RE)
-- to define a set of strings ("all strings that have this property")
* good for any patterns
* generates strings
DFA -- deterministic finite automaton
* is this letter in the language?
* accepts strings
NFA -- nondeterministic finite automaton
* accepts strings</p>

<ul>
<li>the three types of systems are equivalent</li>
<li>an NFA is not more powerful than a DFA</li>
<li>a regular expression is not more powerful than a NFA
<code>RE =&gt; NFA =&gt; DFA =&gt; RE</code></li>
</ul>


<p>useful for describing a language (set of strings)
* an individual string is finite
* the language can be finite or infinite
seen in theory of computation and compiler design classes</p>

<ul>
<li>a DFA defines a single language (single set of strings)</li>
<li>the same is true for an NFA, CFG, PDA, and regular expressions</li>
</ul>


<h1>DFA</h1>

<ul>
<li>deterministic finite automaton</li>
<li>begin with a single start state (S)</li>
<li>has a set of states (P)</li>
<li>the allowable alphabet/symbols (sigma)</li>
<li>may have a set of final states (F)</li>
<li>set of transitions [state, symbol, new-state] (T)</li>
<li>for every combination of state and symbol, end in one state</li>
</ul>


<h1>NFA</h1>

<ul>
<li>for every combination of state and symbol, end in a number of states

<ul>
<li>if ending in a  final state, the symbol exists in the language</li>
</ul>
</li>
</ul>


<h2>Exercises</h2>

<ol>
<li>Write a DFA that defines the language {a<sup>n</sup> b<sup>n</sup> | n >= 0 }
  => not possible</li>
<li>Write a DFA that defines the language of all strings over sigma = {a, b, c, d} that contain the substring aaaa or aabb in them.
  => possible but annoying to do</li>
</ol>


<h2>using a scanner/lexical analyzer to grab various tokens</h2>

<ul>
<li>lex converts a regular expression into a NFA and then mostly to a DFA</li>
<li>n = 42 % 13 + ifn19z + "dog".length;</li>
</ul>


<h1>context-free language in terms of expressiveness</h1>

<h2>context-free grammar (CFG)</h2>

<ul>
<li>generates strings</li>
<li>another method for defining a language.</li>
<li>nice because it is more powerful and expressive</li>
<li>worse because it is more complicated</li>
<li>can be rewritten from any regular expression

<h2>deterministic PDA</h2></li>
<li>less powerful than PDA

<h2>pushdown automata (PDA)</h2></li>
<li>accepts strings</li>
<li>similar to a finite automaton except it has a stack</li>
<li>pushdown are nondeterministic</li>
<li>deterministic pushdown automaton are much less powerful</li>
</ul>


<h2>syntaxes of a language are defined with a context-free grammar (Backus-Naur Form)</h2>

<ul>
<li>large list of context-free grammar that is translated through YACC/BISON that implements a deterministic pushdown automata</li>
<li>various parsing techniques were created as a result</li>
</ul>

</body></html>
