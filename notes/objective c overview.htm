<html><head><title>objective c overview</title></head><body><a href='index.htm'>Notes Home</a><hr><h2>Overview</h2>

<ul>
<li>superset of C</li>
<li>object oriented</li>
<li>primary development language of iOS and OS X</li>
</ul>


<h2>Classes</h2>

<ul>
<li>interface - the description of an object's methods and properties <em>(.h)</em></li>
<li>implementation - internal state and actual code implementing those methods <em>(.m)</em></li>
</ul>


<h3>Interface</h3>

<p>@interface Car : NSObject</p>

<pre><code>// Class methods
+ (NSString*) defaultMake;

// Instance methods
- (void) start;
- (BOOL) lock;
- (BOOL) unlock;
</code></pre>

<p>@end</p>

<h3>Implementation</h3>

<p>@implementation Car
{</p>

<pre><code>// Explicit instance variable
// Default scope is protected
BOOL _locked;
</code></pre>

<p>}</p>

<ul>
<li><p>(NSString*) defaultMake {
  return @"Toyota";
}</p></li>
<li><p>(BOOL) lock {
  BOOL wasLocked = <em>locked;
  </em>locked = YES;
  return (wasLocked != _locked);
}</p></li>
</ul>


<p>@end</p>

<h2>Properties</h2>

<ul>
<li>declaration and implementation of accessor methods</li>
<li>accessors/instance variables can be automatically synthesized</li>
<li>accessed via dot notation</li>
</ul>


<h3>Interface</h3>

<p>@interface Car : NSObject</p>

<pre><code>@property (readwrite) BOOL locked;
</code></pre>

<p>@end</p>

<h3>Implementation</h3>

<p>@implementation Car</p>

<pre><code>@synthesize locked = _locked;
</code></pre>

<p>@end</p>

<h3>Addressing Properties</h3>

<p>BOOL isTheCarLocked = car.locked;
car.locked = YES;</p>

<h2>Methods</h2>

<ul>
<li>method arguments in Objective-C are named</li>
<li>method invocation uses square brackets</li>
<li>arguments are interposed within method name</li>
<li>declaration:  -/+ (returnType*) adjustSeatPosition:(int)whichSeat

<pre><code>                                                                      toHeight:(float)height;
</code></pre></li>
<li>invocation:

<ul>
<li>instance:  [myCar adjustSeatPosition:0...];</li>
<li>class: NSString *default = [Car defaultMake];</li>
</ul>
</li>
<li>nil (null) method calls are allowed (no effect at runtime)</li>
</ul>


<h2>Standard Methods</h2>

<ul>
<li><ul>
<li>(NSString*) description</li>
</ul>
</li>
<li>-(id) init</li>
</ul>


<h2>Creating Objects</h2>

<ul>
<li>"alloc/init" pattern (allocate memory and then initialize values in object)</li>
<li>Car *c = [[Car alloc] init];</li>
</ul>


<h2>Conventions</h2>

<ul>
<li>descriptive, camel-case</li>
<li>lowercase method and property names (myProperty)</li>
<li>Uppercase class names (MyClassName)</li>
</ul>


<h2>target-action mechanism</h2>

<ul>
<li>"[...]you can add an action to a UI element and set up its corresponding action method by Control-dragging from the element on the canvas to the appropriate source file (typically, a view controller's source file)" (Your First iOS App)</li>
<li>"An outlet describes a connection between two objects. When you want an object (such as the view controller) to communicate with an object that it contains (such as the text field), you designate the contained object as an outlet" (Your First iOS App)</li>
</ul>


<h2>References</h2>

<ul>
<li><a href="http://hci-ipad.org/">Developing iPad Applications for Visualization and Insight</a>, CMU course</li>
<li><a href="https://developer.apple.com/library/ios/#referencelibrary/GettingStarted/RoadMapiOS/JumpRightIn/iPhone101/Articles/00_Introduction.html#//apple_ref/doc/uid/TP40011343-TP40007514">Your First iOS App</a></li>
</ul>

<footer><hr><em>Last modified: 2012-02-20 19:40:57 -0500</em></footer></body></html>
