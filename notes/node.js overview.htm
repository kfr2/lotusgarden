<html><head><title>node.js overview</title></head><body><a href='index.htm'>Notes Home</a><hr><h2>miscellaneous</h2>

<ul>
<li><code>process</code>

<ul>
<li>global object variable (like window)</li>
<li>typing "process" will allow you to see its internals</li>
</ul>
</li>
<li>node exits when it has nothing further to do</li>
</ul>


<h2>hello world</h2>

<pre><code>setTimeout(function() {
    console.log("world");
}, 2000);

console.log("hello");
</code></pre>

<h2>hello world (web server)</h2>

<pre><code>var http = require("http");

var s = http.createServer(function(req, res) {
    res.writeHead(200, { "content-type": "text/plain" });
    res.end("hello\n");
    setTimeout(function() {
        res.end("world!\n");
    }, 2000);
});

s.listen(8000);
</code></pre>

<h2>chat server (tcp)</h2>

<pre><code>var net = require("net");

var sockets = [];

var s = net.Server(function(socket) {
    sockets.push(socket);

    socket.on("data", function(d) {
        for(var i = 0; i &lt; sockets.length; i++) {
            if(sockets[i] == socket) continue;
            sockets[i].write(d);
        }
    });

    socket.on("end", function() {
        var i = sockets.indexOf(socket);
        sockets.split(i, 1);
    });
});

s.listen(8000);
</code></pre>

<h2>combined example</h2>

<pre><code>setInterval(function() {
    console.log("world.\n");
}, 2000);

console.log("hello\n");

var http = require("http");
    setInterval(function() {
    console.log("fetching google.com");

    http.get({ host: "google.com" }, function(res) {
        console.log(res.headers);
    });
}, 5000);

console.log("hello\n");

var s = http.Server(function(req, res) {
    res.writeHead(200);

    setTimeout(function() {
        res.end("hello world\n");
    }, 2000);
});

s.listen(8000);
</code></pre>

<h2>debugging</h2>

<ul>
<li>use the debugger; command in code</li>
<li>run it by using node debugger source-file.js</li>
</ul>


<h2>example application stack</h2>

<ol>
<li><em>HTTP server</em> to serve web pages</li>
<li><em>router</em> to map requests to request handlers</li>
<li><em>request handlers</em> to fulfill the requests that have arrived at the server</li>
<li><em>request data handling</em> to give POST data/etc to request handlers in a convenient form</li>
<li><em>view logic</em> used by request handlers to send content to user's browser</li>
<li><em>upload handling</em> to handle uploads</li>
</ol>


<h2>passing named functions as parameters</h2>

<ul>
<li>function say(word){ console.log(word); }</li>
<li>function execute(someFunction, value){ someFunction(value); }</li>
<li>execute(say, "Hi.");</li>
</ul>


<h2>passing anonymous functions as parameters</h2>

<ul>
<li>function execute(function(word) { console.log(word); });</li>
</ul>


<h2>blocking operations</h2>

<ul>
<li>operations that block everything else from working</li>
<li>ex:  some expensive computation, sleep()</li>
<li>should be avoided in Node.js</li>
<li>callbacks should be used by passing functions to other functions that may take time to complete

<ul>
<li>"'Hey, probablyExpensiveFunction(), please do your stuff, but I, the single Node.js thread, am not going to wait right here until you are finished, I will continue to execute the lines of code below you, so would you please take this callbackFunction() here and call it when you are finished doing your expensive stuff? Thanks!'"</li>
</ul>
</li>
</ul>


<h2>executing shell commands from within Node.js</h2>

<p>var exec = require("child_process").exec</p>

<p>exec("command", function (error, stdout, stderr) {</p>

<pre><code>// something with stdout, etc
</code></pre>

<p>});</p>

<h3>References</h3>

<ul>
<li><a href="http://www.youtube.com/watch?v=jo_B4LTHi3I">Introduction to Node.js with Ryan Dahl</a></li>
<li><a href="http://nodebeginner.org/">The Node Beginner Book</a></li>
</ul>


<h3>See Also</h3>

<ul>
<li><a href="http://debuggable.com/posts/understanding-node-js:4bd98440-45e4-4a9a-8ef7-0f7ecbdd56cb">Understanding node.js</a></li>
</ul>

<footer><hr><em>Last modified: 2012-03-02 22:30:36 -0500</em></footer></body></html>
